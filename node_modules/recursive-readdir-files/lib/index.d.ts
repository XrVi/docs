/// <reference types="node" />
import fs from 'node:fs';
export interface RecursiveReaddirFilesOptions {
    /**
     * Ignore files
     * @example `/\/(node_modules|\.git)/`
     */
    ignored?: RegExp;
    /**
     * Specifies a list of `glob` patterns that match files to be included in compilation.
     * @example `/(\.json)$/`
     */
    include?: RegExp;
    /**
     * Specifies a list of files to be excluded from compilation.
     * @example `/(package\.json)$/`
     */
    exclude?: RegExp;
    /** Provide filtering methods to filter data. */
    filter?: (item: IFileDirStat) => boolean;
}
export interface IFileDirStat extends Partial<fs.Stats> {
    /**
     * @example `/a/sum.jpg` => `sum.jpg`
     */
    name: string;
    /**
     * @example `/basic/src/utils/sum.ts`
     */
    path: string;
    /**
     * @example `/a/b.jpg` => `jpg`
     */
    ext?: string;
}
type Callback = (filepath: string, stat: IFileDirStat) => void;
export default function recursiveReaddirFiles(rootPath: string, options?: RecursiveReaddirFilesOptions, callback?: Callback): Promise<IFileDirStat[]>;
export { recursiveReaddirFiles };
export declare const getStat: (filepath: string) => Promise<IFileDirStat>;
/**
 * Get ext
 * @param {String} filePath `/a/b.jpg` => `jpg`
 */
export declare const getExt: (filePath: string) => string;
