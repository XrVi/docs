import fs from 'node:fs';
import path from 'node:path';
export default function recursiveReaddirFiles(rootPath, options = {}, callback) {
    return getFiles(rootPath, options, [], callback);
}
export { recursiveReaddirFiles };
async function getFiles(rootPath, options = {}, files = [], callback) {
    const { ignored, include, exclude, filter } = options;
    const filesData = await fs.promises.readdir(rootPath);
    const fileDir = filesData
        .map((file) => ({
        name: file,
        path: path.join(rootPath, file),
    }))
        .filter((item) => {
        if (include && include.test(item.path)) {
            return true;
        }
        if (exclude && exclude.test(item.path)) {
            return false;
        }
        if (ignored) {
            return !ignored.test(item.path);
        }
        return true;
    });
    if (callback) {
        fileDir.map(async (item) => {
            const stat = await getStat(item.path);
            if (stat.isDirectory()) {
                getFiles(item.path, options, [], callback);
            }
            callback(item.path, stat);
        });
    }
    else {
        await Promise.all(fileDir.map(async (item) => {
            const stat = await getStat(item.path);
            if (stat.isDirectory()) {
                const arr = await getFiles(item.path, options, []);
                files = files.concat(arr);
            }
            else if (stat.isFile()) {
                files.push(stat);
            }
        }));
    }
    return files.filter((item) => {
        if (filter && typeof filter === 'function') {
            return filter(item);
        }
        return true;
    });
}
export const getStat = async (filepath) => {
    const stat = (await fs.promises.stat(filepath));
    stat.ext = '';
    if (stat.isFile()) {
        stat.ext = getExt(filepath);
        stat.name = path.basename(filepath);
        stat.path = path.resolve(filepath);
    }
    return stat;
};
/**
 * Get ext
 * @param {String} filePath `/a/b.jpg` => `jpg`
 */
export const getExt = (filePath) => path.extname(filePath).replace(/^\./, '').toLowerCase();
/** CommonJS default export hack */
if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = Object.assign(module.exports.default, module.exports);
}
//# sourceMappingURL=index.js.map