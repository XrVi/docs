import path from 'path';
import fs from 'fs-extra';
import { getStat } from 'recursive-readdir-files';
export class CacheFile {
    data = {};
    path;
    filename = '.filesStat.json';
    folder = '';
    isSave = false;
    constructor(folder = '.idoc') {
        this.folder = path.resolve(process.cwd(), folder);
        this.path = path.resolve(this.folder, this.filename);
    }
    async init(isSave = false) {
        if (isSave) {
            this.isSave = isSave;
            await fs.ensureDir(this.folder);
        }
        return this;
    }
    async load() {
        if (this.isSave && fs.existsSync(this.path)) {
            this.data = await fs.readJSON(this.path);
        }
    }
    async save() {
        if (this.isSave) {
            await fs.writeFile(this.path, JSON.stringify(this.data, null, 2));
        }
    }
    getPath(rawPath) {
        return path.relative(process.cwd(), rawPath);
    }
    get(rawPath) {
        const mdPath = this.getPath(rawPath);
        return this.data[mdPath] ? this.data[mdPath] : {};
    }
    add(stat, update) {
        const { atime, mtime, ctime, birthtime, path: mdRawPath } = stat || {};
        const mdPath = this.getPath(mdRawPath);
        if (update || !this.data[mdPath]) {
            this.data[mdPath] = { atime, mtime, ctime, birthtime };
        }
        return this;
    }
    async update(filepath) {
        const stat = await getStat(filepath);
        return this.add(stat, true);
    }
    remove(rawPath) {
        const mdPath = this.getPath(rawPath);
        if (this.data[mdPath]) {
            delete this.data[mdPath];
        }
    }
}
export const cacheFile = new CacheFile();
